KEY_FILE="$HOME/.ssh/id_rsa"
PWD_DB_FILE='../etc/pwd.db'
user_not_found='__USER_NOT_FOUND__'
pwd_db_file_missing='__PWD_DB_FILE_MISSING__'
validity_pwd_tag='___KF_SIG'
bad_pwd_tag='__ERR_UNREADABLE_PWD_FILE__'

## binaries list
AWK_BIN=`which awk 2>/dev/null`
BASE64_BIN=`which base64 2>/dev/null`
CUT_BIN=`which cut 2>/dev/null`
MD5SUM_BIN=`which md5sum 2>/dev/null`
OPENSSL_BIN=`which openssl 2>/dev/null`
SED_BIN=`which sed 2>/dev/null`

#########################################################
## FUNCTION : die
## PURPOSE  : prints error and exit 1
## PARAMS   : string to echo
## OUTPUT   : exit 1
##
## STATUS   : no test needed
#########################################################
function die
{
    local str_to_echo=$@
	
	echo $@
	exit 1
}
## END: die()

#########################################################
## FUNCTION : usage
## PURPOSE  : show script usage
## PARAMS   : N/A
## OUTPUT   : exit 1
##
## STATUS   : no test needed
#########################################################
function usage
{
     echo "Usage: ./abre -u <user_given> [-d </path/to/pwd.db>] [-k <path/to/key_file_to_use>] [-s]"
     echo "where:"
     echo "   u - used to identify the <user_given> to use"
     echo "   d - optional. Defaults to abre/etc/pwd.db. To override, specify </path/to/pwd.db>"
     echo "   k - optional. Defaults to ~/.ssh/id_rsa. To override, specify </path/to/key_file_to_use>"
     echo "   s - Set password of <user_given>. If not specified, gets password"
}
## END: usage()

#########################################################
## FUNCTION : check_needed_tools
## PURPOSE  : to check needed binaries for this script
## PARAMS   : N/A
## OUTPUT   : exit 1 - when a binary/binaries missing
##
## STATUS   : no test needed
#########################################################
function check_needed_tools
{
    ## check binaries make sure it exist in machine
    if   test "-${AWK_BIN}-"      = "--" \
   	  || test "-${BASE64_BIN}-"   = "--" \
      || test "-${CUT_BIN}-"      = "--" \
      || test "-${MD5SUM_BIN}-"   = "--" \
      || test "-${OPENSSL_BIN}-"  = "--" \
      || test "-${SED_BIN}-"      = "--"
    then
	  die "[ERROR] It seems that some binaries are missing. Cannot run script"
    fi
}
## END: check_needed_tools()

#########################################################
## FUNCTION : check_KF_exist
## PURPOSE  : to check if $KEY_FILE exist
## PARAMS   : N/A
## OUTPUT   : exit 1 - when $KEY_FILE missing/not found
##
## STATUS   : no test needed
#########################################################
function check_KF_exist
{
    [ ! -e "$KEY_FILE" ] && die "[ERROR] \$KEY_FILE ($KEY_FILE) does not exist" 
} 
## END: check_KF_exist()

#########################################################
## FUNCTION : is_user_found
## PURPOSE  : check if a user is found in database
## PARAMS   : $1 - user
## OUTPUT   : 0 - NOT FOUND
##            1 - FOUND
##
## STATUS: tested per 'tests/TEST_is_user_found.sh'
#########################################################
function is_user_found
{
    local USER=$1
    local retval=0

    [ -e "$PWD_DB_FILE" ] && user_found=`$AWK_BIN "/$USER\ / {print \\$1}" "$PWD_DB_FILE"`
    [ "$user_found" == "$USER" ] && retval=1

    return $retval
}
## END: is_user_found()

#########################################################
## FUNCTION : get_cipher_text
## PURPOSE  : get the encrypted password of user
## PARAMS   : $1 - username
## OUTPUT   : echo of $cipher_text
##
## STATUS: NOT TESTED YET
#########################################################
function get_cipher_text
{
    local USER=$1

    [ $DEBUG_ACTIVE ] && echo "debug: get_encrypted_value() param: |$USER|"
    cipher_text=`$AWK_BIN "/$USER\ / {print \\$2}" "$PWD_DB_FILE"`

    echo $cipher_text
}
## END: get_cipher_text()

#########################################################
## FUNCTION : get_password
## PURPOSE  : 
## PARAMS   : 
## OUTPUT   :
##
## TODO     : add __KF_SIG checking for password db integrity
## STATUS   : NOT TESTED YET
#########################################################
function get_password
{
    local USER=$1
    local retval=$user_not_found
 
    [ $DEBUG_ACTIVE ] && echo "debug: get_password() - param: |$USER|"

    if [ "$(get_KF_SIG)" == "$(get_file_md5 "$KEY_FILE")" ]; then
        ## if account not found, return $user_not_found
        is_user_found $USER
        local found_user=$? 
        if [ ${found_user} -eq 0 ]; then
            retval=$user_not_found
        else
            retval=$(echo `get_cipher_text $USER`|$BASE64_BIN -d|$OPENSSL_BIN des3 -d -k "$KEY_FILE")
        fi
    else
        retval=$bad_pwd_tag
    fi 

    echo $retval
}
## END: get_password()

## get key file signature
#########################################################
## FUNCTION : get_KF_SIG
## PURPOSE  : 
## PARAMS   : 
## OUTPUT   :
##
## STATUS: NOT TESTED YET
#########################################################
function get_KF_SIG
{
  local  cipher_text=""

  cipher_text=$(get_cipher_text $validity_pwd_tag)
  [ "$cipher_text" == "" ] && cipher_text=$bad_pwd_tag

  echo $cipher_text  
}
## END: get_KF_SIG()

#########################################################
## FUNCTION : set_password
## PURPOSE  : 
## PARAMS   : 
## OUTPUT   :
##
## STATUS: NOT TESTED YET
#########################################################
function set_password
{
   local USER_TO_CHECK=$1
   local __kf_sig_val=$(get_file_md5 "$KEY_FILE")
   local kf_id=$(get_KF_SIG)
   
   ## $PWD_DB_FILE absent. Add __KF_SIG
   if [ ! -e $PWD_DB_FILE ]; then
       echo "$validity_pwd_tag $__kf_sig_val" > $PWD_DB_FILE
       set_password_actual $USER_TO_CHECK
   ## $PWD_DB_FILE already exist. 
   ## verify value of $validity_pwd_tag
   else
      ## $__kfsig_val is same as $kf_id, User validated.
      if [ "$__kf_sig_val" == "$kf_id" ]; then
          read -s -p "Password: " PWD_entered
          echo
          read -s -p "Re-input Password: " PWD_entered2
          echo
          [ $DEBUG_ACTIVE ] && echo "[debug] $PWD_entered"
          [ $DEBUG_ACTIVE ] && echo "[debug] $PWD_entered2"

          local crypt_passwd1=$(echo "$PWD_entered"|$MD5SUM_BIN -t|$CUT_BIN -d' ' -f1) 
          local crypt_passwd2=$(echo "$PWD_entered2"|$MD5SUM_BIN -t|$CUT_BIN -d' ' -f1) 
          #if [ "$PWD_entered" == "$PWD_entered2" ]; then
          if [ "$crypt_passwd1" == "$crypt_passwd2" ]; then
              generated_pwd=$(echo "$PWD_entered"|$OPENSSL_BIN des3 -k "$KEY_FILE"|$BASE64_BIN)
              echo "$USER_TO_CHECK $generated_pwd" >> "$PWD_DB_FILE"
              echo "[SUCCESS] user(${USER_TO_CHECK}) information saved!"
          else
              echo 'ERROR: Passwords does not match!'
              exit 1
          fi
      elif [ "$kfid" == "$bad_pwd_tag" ]; then
          echo "ERROR: Unreadable pwd database."
      else
          echo "ERROR: Unauthorized to save new account to pwd database"
      fi
   fi
}
## END: set_password()

##########################################################
### FUNCTION : get_file_md5
## PURPOSE  : 
## PARAMS   : 
## OUTPUT   :
##
## STATUS: NOT TESTED YET
#########################################################
function get_file_md5
{
    local file_to_check="$@"

    md5_hash=`$MD5SUM_BIN "$file_to_check"|cut -d' ' -f1`
    echo $md5_hash
}
## END: get_file_md5()

#########################################################
## FUNCTION : auth_check_keyfile
## PURPOSE  : 
## PARAMS   : 
## OUTPUT   :
##
## STATUS: NOT TESTED YET
#########################################################
function auth_check_keyfile
{
    local db_validity
    local key_validity

    ## extract __KF_SIG
    ## get md5 of $KEY_FILE
    ## if does not match, declare: "Unauthorized user"
	db_validity=$(get_cipher_text $validity_pwd_tag)

    key_validity=$(get_file_md5 "$KEY_FILE")
    if [ "$db_validity" == "$key_validity" ]; then
        echo "Yehey, valid user"
    else
        echo "Unauthorized user"
    fi
}
## END: auth_check_keyfile()
